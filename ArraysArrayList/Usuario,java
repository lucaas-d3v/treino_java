package com.techbank.TechBank.model;

import jakarta.validation.constraints.*;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.persistence.*;
import org.hibernate.validator.constraints.br.CPF;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import java.time.LocalDate;
import java.time.Period;

@Entity
@Table(name = "usuarios")
public class Usuario {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @NotBlank(message = "Nome é obrigatório.")
    @Size(min = 3, max = 100, message = "Nome deve conter entre 3 a 100 caracteres.")
    private String nome;

    @NotBlank(message = "Cpf é obrigatório.")
    @CPF(message = "Cpf inválido.")
    private String cpf;

    @Email(message = "Email deve ser válido.")
    @NotBlank(message = "Email é obrigatório")
    private String email;

    private LocalDate dataNascimento;

    @NotBlank(message = "Telefone é obrigatório.")
    @Pattern(
            regexp = "\\d{11}|\\(\\d{2}\\)\\d{5}-\\d{4}",
            message = "Telefone precisa estar no formato xxxxxxxxxxx ou (xx)xxxxx-xxxx."
    )
    private String telefone;

    private double saldo = 0.0;

    @Column(name = "senha")
    @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
    @NotBlank(message = "Senha é obrigatória.")
    @Pattern(
            regexp = "^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$",
            message = "A senha deve ter no mínimo 8 caracteres, incluindo letras, números e caracteres especiais."
    )
    private String senha;

    @PrePersist
    @PreUpdate
    public void criptografarSenha(){
        if (this.senha != null && !isEncrypted(this.senha)){
            BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();

            this.senha = encoder.encode(this.senha);
        }

    }

    // verificar se a senha ja ta criptografada.
    public boolean isEncrypted(String senha) {
        return senha.startsWith("$2a$") || senha.startsWith("$2b$");
    }


    @Transient
    public int getIdade(){
        if (dataNascimento != null){
            return Period.between(dataNascimento, LocalDate.now()).getYears();
        }

        return 0;
    }

    public Long getId() {
        return id;
    }

    public String getNome() {
        return nome;
    }

    public void setNome(String nome) {
        this.nome = nome;
    }

    public String getCpf() {
        return cpf;
    }

    public void setCpf(String cpf) {
        this.cpf = cpf;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public LocalDate getDataNascimento() {
        return dataNascimento;
    }

    public void setDataNascimento(LocalDate dataNascimento) {
        this.dataNascimento = dataNascimento;
    }

    public String getTelefone() {
        return telefone;
    }

    public void setTelefone(String telefone) {
        this.telefone = telefone;
    }

    public String getSenha() {
        return senha;
    }

    public void setSenha(String senha) {
        this.senha = senha;
    }

    public double getSaldo() {
        return saldo;
    }

    public void setSaldo(double saldo) {
        this.saldo = saldo;
    }

    public Usuario() {
    }

    public Usuario(String nome, String cpf, String email, String telefone, LocalDate dataNascimento, String senha){
        this.nome = nome;
        this.cpf = cpf;
        this.email = email;
        this.telefone = telefone;
        this.dataNascimento = dataNascimento;
        this.senha = senha;

    }

}
